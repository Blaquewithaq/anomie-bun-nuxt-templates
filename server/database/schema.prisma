generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "darwin-arm64"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["app", "private", "public"]
}

//------------------------------------------------
// Schema: app
//------------------------------------------------

model Build {
  id                 String               @id @unique @default(uuid()) @db.Uuid
  codename           String               @unique
  changelog          String
  buildDate          String
  version            String               @unique
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime             @default(now()) @map("updated_at") @db.Timestamptz(6)
  client             Client[]
  linkBuildAndTarget LinkBuildAndTarget[]

  @@map("build")
  @@schema("app")
}

enum TargetPlatform {
  windows
  macos
  linux
  android
  ios
  web
  other

  @@map("target_platform")
  @@schema("app")
}

model Target {
  id                 String               @id @unique @default(uuid()) @db.Uuid
  name               String               @unique
  description        String
  platform           TargetPlatform
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime             @default(now()) @map("updated_at") @db.Timestamptz(6)
  client             Client[]
  linkBuildAndTarget LinkBuildAndTarget[]

  @@map("target")
  @@schema("app")
}

model ClientData {
  id                            String   @id @unique @db.Uuid
  browserPropertiesAllowCollect Boolean  @default(true) @map("browser_properties_allow_collect")
  browserProperties             Json?    @map("browser_properties")
  createdAt                     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                     DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  client                        Client   @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("client_data")
  @@schema("app")
}

model Client {
  id         String      @id @unique @default(uuid()) @db.Uuid
  online     Boolean     @default(false)
  lastOnline DateTime    @default(now()) @map("last_online") @db.Timestamptz(6)
  disabled   Boolean     @default(false)
  buildId    String      @map("build_id") @db.Uuid
  targetId   String      @map("target_id") @db.Uuid
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime    @default(now()) @map("updated_at") @db.Timestamptz(6)
  build      Build       @relation(fields: [buildId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  target     Target      @relation(fields: [targetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  data       ClientData?

  @@map("client")
  @@schema("app")
}

model LinkBuildAndTarget {
  buildId   String   @map("build_id") @db.Uuid
  targetId  String   @map("target_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  build     Build    @relation(fields: [buildId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  target    Target   @relation(fields: [targetId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([buildId, targetId])
  @@map("link_build_and_target")
  @@schema("app")
}

//------------------------------------------------
// Schema: private
//------------------------------------------------

enum AccountRole {
  admin
  user
  beta
  tester

  @@map("account_role")
  @@schema("private")
}

model Account {
  id        String      @id @unique @db.Uuid
  email     String      @unique
  phone     String?     @unique
  role      AccountRole @default(user)
  verified  Boolean     @default(false)
  banned    Boolean     @default(false)
  profile   Profile?
  billing   Billing?
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime    @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("account")
  @@schema("private")
}

model Billing {
  id           String        @id @unique @db.Uuid
  stripeId     String?       @unique @map("stripe_id")
  subscription Subscription?
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime      @default(now()) @map("updated_at") @db.Timestamptz(6)
  account      Account       @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id, stripeId])
  @@map("billing")
  @@schema("private")
}

model Subscription {
  id                   String   @id @unique @db.Uuid
  stripeSubscriptionId String   @unique @map("stripe_subscription_id")
  productId            String   @unique @map("product_id")
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  billing              Billing  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([id, stripeSubscriptionId])
  @@map("subscription")
  @@schema("private")
}

model Product {
  id                String   @id @unique @default(uuid()) @db.Uuid
  stripeProductId   String?  @unique @map("stripe_product_id")
  name              String
  description       String?
  active            Boolean  @default(false)
  deleted           Boolean  @default(false)
  features          String[]
  imageUrls         String[] @map("image_urls")
  price             String
  currency          String
  recurringInterval String   @map("recurring_interval")
  recurringCount    Int      @map("recurring_count")
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([id, stripeProductId])
  @@map("product")
  @@schema("private")
}

//------------------------------------------------
// Schema: public
//------------------------------------------------

model Profile {
  id        String   @id @unique @db.Uuid
  username  String   @unique
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  account   Account  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("profile")
  @@schema("public")
}
